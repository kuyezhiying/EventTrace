${
    using Typewriter.Extensions.WebApi;

    string ReturnType(Method m) => m.Type.Name == "IHttpActionResult" || m.Type.Name == "HttpResponseMessage" ? "Promise<any>" : m.Type.Name;
    string ReturnKeyword(Method m) => m.Type.Name == "void" ? "" : "return";
    string ClassName(Class c) => c.Name.Replace("Controller", "ApiService");

    Template(Settings settings)
    {
        settings.IncludeProject("WebApi");
         
        settings.OutputFilenameFactory = file => 
        {
            return $"{file.Name.Replace("Controller.cs", ".service.ts").Replace("WebService","")}";
        };
    }

    // DONT FORMAT CODE. OTHERWISE IT INSERTS UNWANTED WHITESPACES WHICH BREAKS THE LINTER.
}// Auto-generated by typewriter from C# controller

import { ApiService } from "../ApiServices/ApiService";
import { ApiServiceCancelator } from "../ApiServices/ApiServiceCancelator";
$Classes(*Controller)[
export default class $ClassName {$Methods[
    public static $name = ($Parameters[$name: $Type$HasDefaultValue[ = $DefaultValue], ]cancelator?: ApiServiceCancelator): $ReturnType => {
        $ReturnKeyword ApiService.request({
            url: `$Url`,
            method: "$HttpMethod",
            data: $RequestData
        }, cancelator);
    }
]
}]